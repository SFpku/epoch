# -*- coding: utf-8 -*-
#*************************************************************************
#***File Name: epoch_visual.py
#***Author: Zhonghai Zhao
#***Mail: zhaozhonghi@126.com 
#***Created Time: 2018年03月25日 星期日 14时39分05秒
#*************************************************************************
class epoch_visual(object):
    '''
    This class contains some functions to visualize sdf file.
    '''
    #initialization
    def __init__(self):
        pass
    #line plot parameter
    def line_set(self):
        '''
        This function stored some predefined line plot parameters.
        '''
        col_sty = ['r-','g--','b-.','c:','k-','y-','m-']
        #col_sty = ['r-','b-.','c:','k-','y-','m-']
        return col_sty
    #default_label
    def default_label(self):
        '''
        This function stored some default labels.
        '''
        label=['mass-ratio=','100:100','100:25','100:400']
        return label
    def plot_array(self,filenumber=0,info='dissipation_3d',field='electric',display=True,factor=1.0,axis='x',index=260, prefix='1',vlim=0.5,arti_v=False, case=0,nspe=3,ifaverage=True,dimen=3,component=3):
        '''
        This function is used to visualize 2d field data.
        parameters:
        filenumber--sdf file number, an integer, default:0.
        info--------array information.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        factor------vmax multifactor,less than 1, default:1.0
        axis--------slice axis, default:'x'
        index-------slice index, default:0
        prefix------file name prefix, default:1
        vlim--------limit range, default:0.5
        arti_v------limit range artificial, default:False.
        case--------different case
        nspe--------n species, default:3.
        '''
        import numpy as np
        from matplotlib import pyplot as plt
        import matplotlib.cm as cm
        from mpl_toolkits.axes_grid1 import make_axes_locatable
        from epoch_class import epoch_class as sdfclass
        sc = sdfclass()
        #get name list
        namelist = sc.get_list(filenumber)
        n = len(namelist)
        dimen = info[-2:]
        #get sample parameters
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        #get extent
        if (dimen == '3d'):
            extent = sc.get_extent_3d(data_dict,axis=axis)
        elif (dimen == '2d'):
            extent = sc.get_extent(data_dict)
        else:
            pass
        #get array
        narray = []
        title = []
        path = []
        #select case
        if(info == 'dissipation_3d'):
            from constants import laser_mr as const
            coeff = const.J0 * const.E0
            for i in range(n):
                array = sc.cal_dissipation_3d(namelist[i], prefix='1', axis=axis, index=index,nspe=nspe)
                if(case == 0):
                    array = array[0] + array[1]
                    title = title +  ['Dissipation ' + '$ D_e $' + ' time = ' + str(namelist[i]+29) + '$ T_0 $']
                elif(case == 1):
                    array = array[0]
                    title = title +  [r'$ \vec J\cdot (\vec E + \vec v_e \times \vec B) $' + ' time = ' + str(namelist[i]+29) + '$ T_0 $']
                elif(case == 2):
                    array = array[1]
                    title = title +  [r'$ - \rho_c \cdot (\vec v_e \cdot \vec E) $' + ' time = ' + str(namelist[i]+29) + '$ T_0 $']
                else:
                    pass
                narray = narray + [array/coeff]
                path = path + ['dissipation/Dissipation_' + str(namelist[i]+29) + '_' + axis + '_' + str(index) + '.png']
            #others
            labels = sc.select_label(case='laser', axis=axis)
            xlabel = labels[0]
            ylabel = labels[1]
        elif(info == 'divergence_3d'):
            from constants import laser_mr as const
            coeff = (const.qe*const.nc)/const.epsilon0*(const.la/10.0)
            for i in range(n):
                array = sc.cal_divergence(namelist[i], field=field, prefix=prefix, axis=axis, index=index, ifaverage=ifaverage, dimen=3)
                narray = narray + [array/coeff]
                title = title + [r'$ \nabla \cdot \vec E $' + ' time = ' + str(namelist[i]) + '$ T_0 $']
                path = path + ['divergence_' + field + '_' + str(namelist[i]) + '_' + axis + '_' + str(index) + '.png']
            labels = sc.select_label(case='laser', axis=axis)
            xlabel = labels[0]
            ylabel = labels[1]
        elif(info == 'vortex_3d'):
            from constants import laser_mr as const
            coeff = (const.qe*const.nc)/const.epsilon0*(const.la/10.0)
            for i in range(n):
                array = sc.cal_vortex(namelist[i], field=field, prefix=prefix, axis=axis, index=index, ifaverage=ifaverage, dimen=3, component=component)
                narray = narray + [array/coeff]
                if(component == 1):
                    title = title + [r'$ (\nabla \times \vec E)_x $' + ' time = ' + str(namelist[i]) + '$ T_0 $']
                elif(component == 2):
                    title = title + [r'$ (\nabla \times \vec E)_y $' + ' time = ' + str(namelist[i]) + '$ T_0 $']
                else:
                    title = title + [r'$ (\nabla \times \vec E)_z $' + ' time = ' + str(namelist[i]) + '$ T_0 $']
                path = path + ['vortex_' + field + '_' + str(namelist[i]) + '_' + axis + '_' + str(index) + '.png']
            labels = sc.select_label(case='laser', axis=axis)
            xlabel = labels[0]
            ylabel = labels[1]
        else:
            pass
        #find max
        if (arti_v == False):
            total = np.abs(np.array(narray))
            vmax = total.max()*factor
        else:
            vmax = vlim
        #select cmp and vmin
        sample = np.array(narray[0])
        if(np.min(sample) < 0):
            cmap = cm.RdBu_r
            vmin = -vmax
        else:
            cmap = cm.Blues
            vmin = 0
        #plot all the figure
        plt.figure(figsize=(10,5))
        for i in range(n):
            ax = plt.gca()
            #im = ax.contourf(array,100,extent=extent,origin='lower',cmap=cmap)
            im = ax.imshow(narray[i],extent=extent,origin='lower',cmap=cmap,vmax=vmax,vmin=vmin,\
                           interpolation='spline36')
            #add label
            plt.xlabel(xlabel)
            plt.ylabel(ylabel)
            #add title
            plt.title(title[i])
            divider = make_axes_locatable(ax)
            cax = divider.append_axes('right',size='3%',pad=0.1)
            plt.colorbar(im,cax=cax)
            #select display or save picture
            if(display == True):
                plt.show()
            else:
                s1 = "figure/"
                plt.savefig(s1+path[i],dpi=300)
                if (i == n-1):
                    plt.close()
                else:
                    plt.clf()
        #return narray
#line plot
    def plot_line(self,filenumber=0,info='dissipation_3d',field='bz',display=True,factor=1.0,axis='x',index=260,axis2='y',index2=0, prefix='1',lim=[-1,1],arti_v=False,nspe=3, figure_size=(10, 5)):
        '''
        This function is used to plot line.
        parameters:
        filenumber--sdf file number, an integer, default:0.
        info--------array information.
        field-------physical field, default:bz.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        factor------vmax multifactor,less than 1, default:1.0
        axis--------slice axis, default:'x'
        index-------slice index, default:260
        axis2-------slice axis, default:'y'
        index2------slice index, default:0
        prefix------file name prefix, default:1
        lim---------limit range, default:[-1,1]
        arti_v------limit range artificial, default:False.
        nspe--------n species, default:3.
        '''
        import numpy as np
        from matplotlib import pyplot as plt
        from epoch_class import epoch_class as sdfclass
        sc = sdfclass()
        color_set = sc.line_set()
        #get name list
        namelist = sc.get_list(filenumber)
        n = len(namelist)
        dimen = info[-2:]
        #get sample parameters
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        keys = data_dict.keys()
        #get x_axis
        if (dimen == '3d'):
            cord = 'xyz'
            for each in cord:
                if((each != axis) and (each != axis2)):
                    axes = each
            x_axis = sc.get_axis_3d(data_dict,axes=axes)
        elif (dimen == '2d'):
            cord = 'xy'
            for each in cord:
                if(each != axis):
                    axes = each
            x_axis = sc.get_axis(data_dict,axes=axes)
        elif (dimen == '1d'):
            axes = axis
            x_axis = sc.get_axis(data_dict, dimen=dimen)
        else:
            pass
        #get array
        narray = []
        legend = []
        #select case
        if(info == 'dissipation_3d'):
            pass
        else:
            if(dimen == '3d'):
                from constants import laser_mr as const
                field = sc.get_field(field=field,keys=keys)
                constant = sc.get_constant_3d(field=field)
                x0 = const.la
                x_axis = x_axis/x0
                # get array
                for i in range(n):
                    data_dict = sc.get_data(namelist[i],prefix=prefix)
                    array = sc.get_array_3d(data_dict,field=field,axis=axis,index=index,axis2=axis2,index2=index2,dimen=1)
                    narray = narray + [array/constant]
                    legend = legend + ['t = ' + str(namelist[i]) + '$ T_0 $']
                #others
                label = sc.select_label(case='laser', axis=axes, dimen=1)
                title = field
            elif(dimen == '2d'):
                pass
            elif(dimen == '1d'):
                from constants import bubble_expansion as const
                field = sc.get_field(field=field,keys=keys)
                constant = sc.get_constant_3d(field=field)
                x0 = const.d0
                x_axis = x_axis/x0
                # get array
                for i in range(n):
                    data_dict = sc.get_data(namelist[i],prefix=prefix)
                    array = data_dict[field].data
                    narray.append(array/constant)
                    legend = legend + ['t = ' + str(namelist[i]) + '$ T_0 $']
                #others
                label = sc.select_label(case='others', axis=axes, dimen=1)
                title = field
            else:
                pass
        #find max
        if (arti_v == False):
            total = np.array(narray)
            vmax = total.max()*factor
            vmin = total.min()*factor
        else:
            vmax = lim[1]
            vmin = lim[0]
        #plot all the figure
        plt.figure(figsize=figure_size)
        for i in range(n):
            plt.plot(x_axis,narray[i],color_set[i],label=legend[i])
        #add label
        plt.xlabel(label)
        #add others
        plt.axis([x_axis.min(), x_axis.max(), vmin, vmax])
        plt.title(title)
        plt.legend()
        #select display or save picture
        if(display == True):
            plt.show()
        else:
            s1 = "figure/"
            s2 = field + '.png' 
            plt.savefig(s1+s2,dpi=300)
            plt.clf()
        plt.close()

#plot 2d field
    def implot(self,filenumber=0,field='bx',magnitude=False,display=True,factor=1.0,gf=False,\
               g_field=150,average=False,prefix='1'):
        '''
        This function is used to visualize 2d field data.
        parameters:
        filenumber--sdf file number, an integer, default:0.
        field-------physical field, default:'bx'.
        magnitude---if plot a vector's module, set True, default:False.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        factor------vmax multifactor,less than 1, default:1.0
        gf----------guide field, default:False
        g_field-----guide field, default:150
        prefix------file name prefix, default:1
        '''
        import numpy as np
        from matplotlib import pyplot as plt
        import matplotlib.cm as cm
        from mpl_toolkits.axes_grid1 import make_axes_locatable
        from epoch_class import epoch_class as sdfclass
        sc = sdfclass()
        #get name list
        namelist = sc.get_list(filenumber)
        n = len(namelist)
        #get sample parameters
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        keys = data_dict.keys()
        if(magnitude == False):
            field = sc.get_field(field=field,keys=keys)
        constant = sc.get_constant(field=field)
        #dx = sc.get_constant(field='axis')
        extent = sc.get_extent(data_dict)
        #for loop to get array from every sdf file
        if(average == False):
            k = 0
        else:
            k = 1
        narray = []
        for eachone in namelist:
            t_array = 0
            for j in range(eachone-k,eachone+k+1):
                data_dict = sc.get_data(j,prefix=prefix)
                if(magnitude == False):
                    array = sc.get_array(data_dict,field=field,gf=gf,g_field=g_field)/constant
                else:
                    array = sc.get_module(data_dict,field=field,gf=gf,g_field=g_field)/constant
                t_array = t_array + array
            narray = narray + [t_array/(2.0*k+1.0)]
        #find max
        total = np.abs(np.array(narray))
        vmax = total.max()*factor
        #select cmp and vmin
        sample = np.array(narray[0])
        if(np.min(sample) < 0):
            cmap = cm.RdBu_r
            vmin = -vmax
        else:
            cmap = cm.Blues
            vmin = 0
        #plot all the figure
        plt.figure(figsize=(10,5))
        for i in range(n):
            #plt.figure(figsize=(10,5))
            ax = plt.gca()
            #im = ax.contourf(array,100,extent=extent,origin='lower',cmap=cmap)
            im = ax.imshow(narray[i],extent=extent,origin='lower',cmap=cmap,vmax=vmax,vmin=vmin,\
                           interpolation='spline36')
            #add label
            plt.xlabel("$ X/d_i $")
            plt.ylabel("$ Y/d_i $")
            #add title
            t1 = "$ time = "
            t2 = str(namelist[i])
            t3 = "\omega_{ci}^{-1} $"
            t = field+"  "+t1+t2+"  "+t3
            plt.title(t)
            divider = make_axes_locatable(ax)
            cax = divider.append_axes('right',size='3%',pad=0.1)
            plt.colorbar(im,cax=cax)
            #select display or save picture
            if(display == True):
                plt.show()
            else:
                s1 = "figure/"
                snumber = str(namelist[i])
                s2 = snumber.zfill(4)
                s3 = ".png"
                path = s1+field+s2+s3
                plt.savefig(path,dpi=300)
                #plt.close()
                plt.clf()
        #return narray
    #plot line array
    def line_plot(self,filenumber=0,field='bx',magnitude=False,display=True,axes='x',pathnumber=1,\
                  prefix='1'):
        '''
        This function is used to plot line array.
        parameters:
        filenumber---filenumber--sdf file number, an integer, default:0.
        field-------physical field, default:'bx'.
        magnitude---if plot a vector's module, set True, default:False.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        axes--------axes,'x' or 'y', default:'x'. 
        pathnumber--save file, default:1
        prefix------file name prefix, default:1
        '''
        import numpy as np
        from matplotlib import pyplot as plt
        from epoch_class import epoch_class as sdfclass
        sc = sdfclass()
        #get name list
        namelist = sc.get_list(filenumber)
        n = len(namelist)
        #get sample parameters
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        keys = data_dict.keys()
        if(magnitude == False):
            field = sc.get_field(field=field,keys=keys)
            index = sc.get_index(data_dict,field=field,axes=axes)
        else:
            index = sc.get_index(data_dict,field='Derived_Number_Density_ele',axes=axes)
        constant = sc.get_constant(field=field)
        axis = sc.get_axis(data_dict,axes=axes)
        #for loop to get array from every sdf file
        nvector = []
        for eachone in namelist:
            data_dict = sc.get_data(eachone,prefix=prefix)
            if(magnitude == False):
                vector = sc.get_line(data_dict,field=field,axes=axes,index=index)/constant
            else:
                array = sc.get_module(data_dict,field=field)/constant
                vector = sc.get_module_line(array,axes=axes,index=index)
            nvector = nvector + [vector]
        #find max
        total = np.abs(np.array(nvector))
        vmax = total.max()
        #select cmp and vmin
        sample = np.array(nvector[0])
        if(np.min(sample) <= 0):
            vmin = -vmax
        else:
            vmin = 0
        color_set = sc.line_set()
        plt.figure(figsize=(10,5))
        for i in range(n):
            plt.plot(axis,nvector[i],color_set[i],label='t='+str(namelist[i]))
        plt.xlabel('$ '+axes.upper()+'/d_i $')
        plt.ylabel(field.upper())
        plt.axis([axis.min(),axis.max(),vmin,vmax])
        plt.legend()
        if(display == True):
            plt.show()
        else:
            s1 = "figure/"
            s2 = field+str(pathnumber)
            s3 = ".png"
            path = s1+s2+s3
            plt.savefig(path,dpi=300)
            plt.clf()
        #return nvector
    #plot reconnection flux
    def integrate_plot(self,namelist,field='bx',axes='y',magnitude=False,semi=True,\
                       label=['mass-ratio=','100:100','100:25','100:400','25:400'],display=True,\
                       max_or_min=False,folder=[4,1]):
        '''
        This function is use to plot integrate flux.
        parameters:
        namelist----sdf name list.
        field-------physical field to be integrated, default:'Magnetic_Field_Bx'
        axes--------axes, 'x' or 'y' ,default:'y'.
        magnitude---in integrate a vector's module, set True, default:False
        semi--------if integrate semi-axis, set True, default:True.
        label-------default label.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        max_or_min--when semi is True, if find extreme min, set False, else set True.
        folder------file path, [folder number,folder start], default:[4,1]
        '''
        import os
        from epoch_class import epoch_class as mysdf
        from matplotlib import pyplot as plt
        sc = mysdf()
        col_sty = sc.line_set()
        cwd = os.getcwd()
        s = '/data'
        plt.figure(figsize=(10,5))
        for i in range(folder[0]):
            #set path
            path = cwd + s + str(i+folder[1])
            os.chdir(path)
            vector = sc.line_integrate(namelist,field=field,axes=axes,magnitude=magnitude,semi=semi,\
                                       max_or_min=max_or_min)
            plt.plot(vector,col_sty[i],label=label[0]+label[i+1])
        plt.xlabel('$ t/\omega_{ci}^{-1} $')
        plt.ylabel('$ \psi/B_0d_i $')
        plt.title('$ Reconnection $'+'  '+'$ Flux $')
        plt.legend()
        #change to the old directory
        os.chdir(cwd)
        if(display == True):
            plt.show()
        else:
            s1 = 'figure/'
            s2 = 'FLUX_'
            s3 = axes.upper()
            s4 = '.png'
            path = s1+s2+s3+s4
            plt.savefig(path,dpi=300)
            plt.clf()
    #plot differrent case in a single figure
    def plot_s(self,namelist,field='jz',axes='y',magnitude=False,display=True,find_max=True,\
               label=['mass-ratio=','100:100','100:25','100:400','25:400'],folder=[4,1],\
               prefix='1'):
        '''
        This function is used to plot lines in a single figure.
        parameters:
        namelist----sdf name list.
        field-------physical field to be integrated, default:'jz'.
        axes--------axes, 'x' or 'y' ,default:'y'.
        magnitude---in integrate a vector's module, set True, default:False.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        find_max----if to find max file, set True, default:True
        prefix------file name prefix, default:1
        '''
        import os
        from epoch_class import epoch_class as mysdf
        from matplotlib import pyplot as plt
        import string
        import numpy as np
        sc = mysdf()
        col_sty = sc.line_set()
        cwd = os.getcwd()
        s = '/data'
        #
        plt.figure(figsize=(10,5))
        for i in range(folder[0]):
            #set path
            path = cwd + s + str(i+folder[1])
            os.chdir(path)
            #use a sample sdf file to get axis
            data_dict = sc.get_data(namelist[0],prefix=prefix)
            info = sc.get_file(namelist,field=field,axes=axes,magnitude=magnitude,find_max=True)
            #get array
            number = int(info[0])
            index = int(info[1])
            data_dict = sc.get_data(number,prefix=prefix)
            keys = data_dict.keys()
            if(magnitude == False):
                field = sc.get_field(field=field,keys=keys)
                array = np.transpose((data_dict[field]).data)
            else:
                field_d = field
                array = sc.get_module(data_dict,field=field_d)
            constant = sc.get_constant(field=field)
            #get vector
            if(axes == 'x'):
                vector = array[:,index]/constant
            else:
                vector = array[index,:]/constant
            #get axis
            cord = 'xy'
            sub = cord.find(axes)
            new_axes = cord[1-sub]
            axis = sc.get_axis(data_dict,axes=new_axes)
            plt.plot(axis,vector,col_sty[i],label=label[0]+label[i+1])
        os.chdir(cwd)
        plt.xlabel('$ '+new_axes.upper()+'/d_i $')
        plt.ylabel(field.upper())
        plt.legend()
        if(display == True):
            plt.show()
        else:
            s1 = 'figure/'
            s2 = field.upper()
            s3 = new_axes.upper()
            s4 = '.png'
            path = s1+s2+'_'+s3+s4
            plt.savefig(path,dpi=300)
            plt.clf()
    #plot dissipation scaler
    def plot_dissipation(self,namelist,display=True,info='current',factor=0.5,prefix='1',nspe=5):
        '''
        This function is used to plot dissipation scalar.
        parameters:
        namelist----sdf name list.
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        info--------information, default:'current'.
        prefix------file name prefix, default:1
        nspe--------n species, default:5.
        '''
        from epoch_class import epoch_class as mysdf
        import numpy as np
        from matplotlib import pyplot as plt
        import matplotlib.cm as cm
        from mpl_toolkits.axes_grid1 import make_axes_locatable
        sc = mysdf()
        namelist = sc.get_list(namelist)
        n = len(namelist)
        #species = ['ele','pro1','pro2','pro3']
        #use sample data to get extent
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        extent = sc.get_extent(data_dict)
        title = [r'$ Dissipation $'+'  '+'$ Scalar $',r'$ \vec J\cdot (\vec E + \vec v \times \vec B) $',r'$ \vec J\cdot \vec E $',r'$ \vec J\cdot (\vec v \times \vec B) $',r'$ \rho_c(\vec v \cdot \vec E) $']
        for i in range(n):
            vector = sc.cal_dissipation(namelist[i],info=info,prefix=prefix,nspe=nspe)
            vmax = np.max(np.array(vector))*factor
            if(np.min(np.array(vector)) <= 0):
                cmap = cm.RdBu_r
                vmin = -vmax
            else:
                cmap = cm.Blues
                vmin = 0
            for j in range(len(vector)):
                plt.figure(i,figsize=(10,5))
                ax = plt.gca()
                #im = ax.contourf(array,100,extent=extent,origin='lower',cmap=cmap)
                im = ax.imshow(vector[j],extent=extent,origin='lower',cmap=cmap,vmax=vmax,vmin=vmin,\
                               interpolation='spline36')
                #add label
                plt.xlabel("$ X/d_i $")
                plt.ylabel("$ Y/d_i $")
                #add title
                t1 = "$ time = "
                t2 = str(namelist[i])
                t3 = "\omega_{ci}^{-1} $"
                t = title[j]+"  "+t1+t2+"  "+t3
                plt.title(t)
                divider = make_axes_locatable(ax)
                cax = divider.append_axes('right',size='3%',pad=0.1)
                plt.colorbar(im,cax=cax)
                #display or save figure
                if(display == True):
                    plt.show()
                else:
                    s1 = 'figure/dissipation/'
                    s2 = "Dissipation_"
                    s3 = str(namelist[i])+'_'+str(j+1)
                    s4 = '.png'
                    path = s1+s2+s3+s4
                    plt.savefig(path,dpi=300)
                    plt.clf()
    #plot dissipation line
    def plot_dissipation_line(self,namelist,axes='x',display=True,factor=0.5,index=256,\
                              prefix='1'):
        '''
        This function is used to plot dissipation line and calculate percent.
        namelist----sdf name list.
        axes--------axes, 'x' or 'y', default:'x'
        display-----if want to display figure, set True, if not, the figure will be save to a png file.default:True.
        factor------limit factor, default:0.5
        prefix------file name prefix, default:1
        '''
        from epoch_class import epoch_class as mysdf
        import numpy as np
        from matplotlib import pyplot as plt
        sc = mysdf()
        namelist = sc.get_list(namelist)
        n = len(namelist)
        percent = np.zeros((4,n),np.float)
        #use sample data to get axis
        data_dict = sc.get_data(namelist[0],prefix=prefix)
        axis = sc.get_axis(data_dict,axes=axes)
        label = [r'$ Dissipation $'+'  '+'$ Scalar $',r'$ \vec J\cdot \vec E $',r'$ \vec J\cdot (\vec v_e \times \vec B) $',r'$ \rho_c(\vec v_e \cdot \vec E) $']
        col_sty = sdf_visual.line_set(self)
        for i in range(n):
            vector = sc.cal_dissipation(namelist[i])
            #get shape
            shape = (vector[0]).shape
            a = shape[0]
            b = shape[1]
            #get line
            if(axes == 'x'):
                array = np.zeros((4,b),np.float)
                for j in range(4):
                    array[j] = (vector[j][index,:] + vector[j][index,:])/2.0
                    #average if necessary
                    for k in range(b-2):
                        array[j,k+1] = (array[j,k] + array[j,k+1] + array[j,k+2])/3.0
            else:
                array = np.zeros((4,a),np.float)
                for j in range(4):
                    array[j] = (vector[j][:,b/2-1] + vector[j][:,b/2])/2.0
                    #average if necessary
                    for k in range(a-2):
                        array[j,k+1] = (array[j,k] + array[j,k+1] + array[j,k+2])/3.0
            #calculate percent
            for j in range(4):
                percent[j,i] = np.sum(array[j])/np.sum(array[0])
            #plor figure
            plt.figure(i,figsize=(10,5))
            for k in range(4):
                plt.plot(axis,array[k],col_sty[k],label=label[k])
            plt.xlabel('$ '+axes.upper()+'/d_i $')
            plt.ylabel("Dissipation Scalar")
            #plt.axis([axis.min(),axis.max(),vmin,vmax])
            plt.legend()
            if(display == True):
                plt.show()
            else:
                s1 = "figure/"
                s2 = "Dissipation_"+axes.upper()+str(namelist[i])
                s3 = ".png"
                path = s1+s2+s3
                plt.savefig(path,dpi=300)
                plt.clf()
            return percent
